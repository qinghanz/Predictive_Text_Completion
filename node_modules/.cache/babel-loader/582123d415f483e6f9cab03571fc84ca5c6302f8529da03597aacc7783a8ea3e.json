{"ast":null,"code":"var _jsxFileName = \"/Users/loverice/Desktop/predictive_text_completion/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [predictedText, setPredictedText] = useState(\"\");\n  const [backendStatus, setBackendStatus] = useState(\"Connecting...\");\n  useEffect(() => {\n    // Check backend connection status\n    fetch(\"/\").then(() => setBackendStatus(\"Connected\")).catch(() => setBackendStatus(\"Disconnected\"));\n  }, []);\n  const handleInputChange = event => {\n    const newText = event.target.value;\n    setText(newText);\n\n    // Send text to the backend for prediction\n    fetch(\"http://127.0.0.1:8000/predict\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: newText\n      })\n    }).then(response => response.json()).then(data => {\n      const predictedText = data.predictedText;\n      setPredictedText(predictedText);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Predictive Text App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Backend Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), \" \", backendStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input\",\n      value: text,\n      onChange: handleInputChange,\n      rows: \"5\",\n      cols: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predicted-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Predicted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: predictedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"drpfCwGK9f2v/WfGBIxT3LGwh9s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","text","setText","predictedText","setPredictedText","backendStatus","setBackendStatus","fetch","then","catch","handleInputChange","event","newText","target","value","method","headers","body","JSON","stringify","response","json","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","cols","_c","$RefreshReg$"],"sources":["/Users/loverice/Desktop/predictive_text_completion/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [predictedText, setPredictedText] = useState(\"\");\n  const [backendStatus, setBackendStatus] = useState(\"Connecting...\");\n\n  useEffect(() => {\n    // Check backend connection status\n    fetch(\"/\")\n      .then(() => setBackendStatus(\"Connected\"))\n      .catch(() => setBackendStatus(\"Disconnected\"));\n  }, []);\n\n  const handleInputChange = (event) => {\n    const newText = event.target.value;\n    setText(newText);\n\n    // Send text to the backend for prediction\n    fetch(\"http://127.0.0.1:8000/predict\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ text: newText }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        const predictedText = data.predictedText;\n        setPredictedText(predictedText);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Predictive Text App</h1>\n      <div className=\"status\">\n        <strong>Backend Status:</strong> {backendStatus}\n      </div>\n      <textarea\n        className=\"input\"\n        value={text}\n        onChange={handleInputChange}\n        rows=\"5\"\n        cols=\"50\"\n      ></textarea>\n      <br />\n      <div className=\"predicted-text\">\n        <h2>Predicted Text:</h2>\n        <p>{predictedText}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}